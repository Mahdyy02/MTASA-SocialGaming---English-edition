min, max, cos, sin, rad, deg, atan2 = math.min, math.max, math.cos, math.sin, math.rad, math.deg, math.atan2
sqrt, abs, floor, ceil, random = math.sqrt, math.abs, math.floor, math.ceil, math.random
gsub = string.gsub

local disallowedNodes = {
	{3015234, 3015233},
	{3015235, 3015234},
	{3014944, 3015235},
	{3014945, 3014944},
	{3014946, 3014945},
	{3014947, 3014946},
	{3014948, 3014947},
	{3080507, 3014948},
	{3080544, 3080507},
	{3080545, 3080544},
	{3080546, 3080545},
	{3080547, 3080546},
	{3080548, 3080547},
	{3080549, 3080548},
	{3080543, 3080549},
	{3080550, 3080288},
	{3080550, 3080543},
	{3080552, 3080550},
	{3080553, 3080552},
	{3080554, 3080553},
	{3080555, 3080554},
	{3080556, 3080555},
	{3080557, 3080556},
	{3080558, 3080557},
	{3080559, 3080558},
	{3080560, 3080559},
	{3080551, 3080560},
	{3080562, 3080551},
	{3080563, 3080562},
	{3080564, 3080563},
	{3080565, 3080564},
	{3080566, 3080565},
	{3080567, 3080566},
	{3080568, 3080567},
	{3080569, 3080568},
	{3080570, 3080569},
	{3080561, 3080570},
	{3080572, 3080561},
	{3080573, 3080572},
	{3080574, 3080573},
	{3080575, 3080574},
	{3080576, 3080575},
	{3080577, 3080576},
	{3080578, 3080577},
	{3080571, 3080578},
	{3080590, 3080571},
	{3080591, 3080590},
	{3080592, 3080591},
	{3080593, 3080592},
	{3080594, 3080593},
	{3080595, 3080594},
	{3080596, 3080595},
	{3080597, 3080596},
	{3080589, 3080597},
	{3080605, 3080589},
	{3080606, 3080605},
	{3080608, 3080606},
	{3080609, 3080608},
	{3080610, 3080609},
	{3080611, 3080610},
	{3080607, 3080611},
	{3080614, 3080607},
	{3080615, 3080614},
	{3604807, 3080615},
	{3604808, 3604807},
	{3604809, 3604808},
	{3604806, 3604809},
	{3604810, 3604581},
	{3604810, 3604806},
	{3604820, 3604810},
	{3604821, 3604820},
	{3604822, 3604821},
	{3604823, 3604822},
	{3604824, 3604823},
	{3604819, 3604824},
	{3604834, 3604819},
	{3604835, 3604834},
	{3604836, 3604835},
	{3604837, 3604836},
	{3604838, 3604837},
	{3604839, 3604838},
	{3604840, 3604839},
	{3604833, 3604840},
	{3604852, 3604833},
	{3604854, 3604852},
	{3604855, 3604854},
	{3604856, 3604855},
	{3604857, 3604856},
	{3604858, 3604857},
	{3604859, 3604858},
	{3604860, 3604859},
	{3604861, 3604860},
	{3604862, 3604861},
	{3604853, 3604862},
	{4128971, 3604853},
	{4128971, 3604554},
	{4128973, 4128971},
	{4128974, 4128973},
	{4128975, 4128974},
	{4128976, 4128975},
	{4128977, 4128976},
	{4128978, 4128977},
	{4128979, 4128978},
	{4128980, 4128979},
	{4128981, 4128980},
	{4128972, 4128981},
	{4128983, 4128972},
	{4128984, 4128983},
	{4128985, 4128984},
	{4128986, 4128985},
	{4128982, 4128986},
	{4129023, 4128982},
	{4129024, 4129023},
	{4129025, 4129024},
	{4129026, 4129025},
	{4129027, 4129026},
	{4129028, 4129027},
	{4129029, 4129028},
	{4129030, 4129029},
	{4129031, 4129030},
	{4129022, 4129031},
	{4129032, 4129022},
	{4129033, 4129032},
	{4129034, 4129033},
	{4129035, 4129034},
	{4129036, 4129035},
	{4129037, 4129036},
	{4063456, 4129037},
	{4063457, 4063456},
	{4063458, 4063457},
	{4063455, 4063458},
	{4063460, 4063455},
	{4063461, 4063460},
	{4063462, 4063461},
	{4063463, 4063462},
	{4063464, 4063463},
	{4063465, 4063464},
	{4063466, 4063465},
	{4063467, 4063466},
	{4063468, 4063467},
	{4063459, 4063468},
	{4063480, 4063459},
	{4063481, 4063480},
	{4063482, 4063481},
	{4063483, 4063482},
	{4063484, 4063483},
	{4063485, 4063484},
	{4063486, 4063485},
	{4063487, 4063486},
	{4063479, 4063487},
	{4063497, 4063479},
	{4063498, 4063497},
	{4063496, 4063498},
	{4063504, 4063496},
	{4063505, 4063504},
	{4063506, 4063505},
	{4063507, 4063506},
	{4063503, 4063507},
	{4063508, 4063525},
	{4063508, 4063503},
	{3997850, 4063508},
	{3997851, 3997850},
	{3997852, 3997851},
	{3997853, 3997852},
	{3997854, 3997853},
	{3997849, 3997854},
	{3997855, 3997849},
	{3997857, 3997855},
	{3997858, 3997857},
	{3997859, 3997858},
	{3997860, 3997859},
	{3997861, 3997860},
	{3997862, 3997861},
	{3997863, 3997862},
	{3997864, 3997863},
	{3997865, 3997864},
	{3997856, 3997865},
	{3997867, 3997856},
	{3997866, 3997867},
	{3997893, 3997789},
	{3997893, 3997866},
	{3997891, 3997893},
	{3997892, 3997891},
	{3473595, 3997892},
	{3473596, 3473595},
	{3473597, 3473596},
	{3473598, 3473597},
	{3473599, 3473598},
	{3473600, 3473599},
	{3473601, 3473600},
	{3473594, 3473601},
	{3473603, 3473594},
	{3473604, 3473603},
	{3473605, 3473604},
	{3473606, 3473605},
	{3473607, 3473606},
	{3473602, 3473607},
	{3473617, 3473602},
	{3473619, 3473617},
	{3473620, 3473619},
	{3473621, 3473620},
	{3473622, 3473621},
	{3473623, 3473622},
	{3473624, 3473623},
	{3473625, 3473624},
	{3473626, 3473625},
	{3473618, 3473626},
	{3473636, 3473618},
	{3473637, 3473636},
	{3473638, 3473637},
	{3473639, 3473638},
	{3473635, 3473639},
	{3473640, 3473635},
	{3473640, 3473517},
	{3473642, 3473640},
	{3473643, 3473642},
	{3473644, 3473643},
	{3473645, 3473644},
	{3473646, 3473645},
	{3473647, 3473646},
	{3473648, 3473647},
	{3473649, 3473648},
	{3473650, 3473649},
	{3473641, 3473650},
	{2949256, 3473641},
	{2949257, 2949256},
	{2949258, 2949257},
	{2949259, 2949258},
	{2949260, 2949259},
	{2949261, 2949260},
	{2949262, 2949261},
	{2949263, 2949262},
	{2949264, 2949263},
	{2949255, 2949264},
	{2949266, 2949255},
	{2949267, 2949266},
	{2949268, 2949267},
	{2949269, 2949268},
	{2949270, 2949269},
	{2949271, 2949270},
	{2949272, 2949271},
	{2949273, 2949272},
	{2949265, 2949273},
	{2949294, 2949265},
	{2949293, 2949294},
	{2949295, 2949293},
	{2949297, 2949295},
	{2949298, 2949297},
	{2949299, 2949298},
	{2949300, 2949299},
	{2949301, 2949300},
	{2949302, 2949301},
	{2949303, 2949302},
	{2949296, 2949303},
	{2949323, 2949296},
	{2949328, 2949323},
	{2949327, 2949328},
	{2949326, 2949327},
	{2949325, 2949326},
	{2949324, 2949325},
	{2949322, 2949185},
	{2949322, 2949324},
	{2949329, 2949322},
	{2949330, 2949329},
	{2949331, 2949330},
	{2949332, 2949331},
	{2949333, 2949332},
	{2949334, 2949333},
	{3014950, 2949334},
	{3014951, 3014950},
	{3014952, 3014951},
	{3014949, 3014952},
	{3014968, 3014949},
	{3014969, 3014968},
	{3014970, 3014969},
	{3014971, 3014970},
	{3014972, 3014971},
	{3014973, 3014972},
	{3014974, 3014973},
	{3014975, 3014974},
	{3014976, 3014975},
	{3014967, 3014976},
	{3014978, 3014967},
	{3014978, 3014998},
	{3014978, 3015400},
	{3014980, 3014978},
	{3014980, 3015002},
	{3015069, 3014980},
	{3015077, 3015069},
	{3015076, 3015077},
	{3015075, 3015076},
	{3014983, 3014984},
	{3014982, 3014983},
	{3014977, 3014979},
	{3014977, 3014982},
	{3015399, 3014977},
	{3015401, 3015399},
	{3015400, 3015401},
	{3015398, 3014980},
	{3014979, 3015063},
	{3015063, 3015064},
	{3014961, 3014977},
	{3014966, 3014961},
	{3014965, 3014966},
	{3014964, 3014965},
	{3014963, 3014964},
	{3014962, 3014963},
	{3014953, 3014962},
	{3014960, 3014953},
	{3014959, 3014960},
	{3014958, 3014959},
	{3014957, 3014958},
	{3014956, 3014957},
	{3014955, 3014956},
	{3014954, 3014955},
	{2949337, 3014954},
	{2949336, 2949337},
	{2949335, 2949336},
	{2949314, 2949335},
	{2949321, 2949314},
	{2949320, 2949321},
	{2949319, 2949320},
	{2949318, 2949319},
	{2949317, 2949318},
	{2949316, 2949317},
	{2949315, 2949316},
	{2949304, 2949315},
	{2949313, 2949304},
	{2949312, 2949313},
	{2949311, 2949312},
	{2949310, 2949311},
	{2949309, 2949310},
	{2949308, 2949309},
	{2949307, 2949308},
	{2949306, 2949307},
	{2949305, 2949306},
	{2949290, 2949305},
	{2949292, 2949290},
	{2949291, 2949292},
	{2949289, 2949151},
	{2949289, 2949291},
	{2949285, 2949289},
	{2949288, 2949285},
	{2949287, 2949288},
	{2949286, 2949287},
	{2949275, 2949286},
	{2949284, 2949275},
	{2949283, 2949284},
	{2949282, 2949283},
	{2949281, 2949282},
	{2949280, 2949281},
	{2949279, 2949280},
	{2949278, 2949279},
	{2949277, 2949278},
	{2949276, 2949277},
	{2949274, 2949276},
	{3473666, 2949274},
	{3473665, 3473666},
	{3473664, 3473665},
	{3473663, 3473664},
	{3473662, 3473663},
	{3473661, 3473662},
	{3473660, 3473661},
	{3473659, 3473660},
	{3473658, 3473659},
	{3473657, 3473658},
	{3473651, 3473657},
	{3473656, 3473651},
	{3473655, 3473656},
	{3473654, 3473655},
	{3473653, 3473654},
	{3473652, 3473653},
	{3473627, 3473652},
	{3473634, 3473627},
	{3473633, 3473634},
	{3473632, 3473633},
	{3473631, 3473632},
	{3473630, 3473631},
	{3473629, 3473630},
	{3473628, 3473629},
	{3473616, 3473498},
	{3473616, 3473628},
	{3473608, 3473616},
	{3473615, 3473608},
	{3473614, 3473615},
	{3473613, 3473614},
	{3473612, 3473613},
	{3473611, 3473612},
	{3473610, 3473611},
	{3473609, 3473610},
	{3473588, 3473609},
	{3473583, 3473588},
	{3473587, 3473583},
	{3473586, 3473587},
	{3473585, 3473586},
	{3473584, 3473585},
	{3997890, 3473584},
	{3997889, 3997890},
	{3997872, 3997889},
	{3997873, 3997872},
	{3997874, 3997873},
	{3997875, 3997874},
	{3997876, 3997875},
	{3997877, 3997876},
	{3997878, 3997877},
	{3997879, 3997878},
	{3997880, 3997879},
	{3997871, 3997880},
	{3997882, 3997871},
	{3997883, 3997882},
	{3997881, 3997883},
	{3997886, 3997881},
	{3997887, 3997886},
	{3997888, 3997887},
	{3997868, 3997884},
	{3997870, 3997868},
	{3997884, 3997885},
	{3997884, 3997800},
	{3997885, 3997888},
	{3997869, 3997870},
	{4063515, 3997869},
	{4063514, 4063515},
	{4063513, 4063514},
	{4063512, 4063513},
	{4063511, 4063512},
	{4063510, 4063511},
	{4063509, 4063510},
	{4063500, 4063509},
	{4063502, 4063500},
	{4063501, 4063502},
	{4063499, 4063501},
	{4063488, 4063499},
	{4063495, 4063488},
	{4063494, 4063495},
	{4063493, 4063494},
	{4063492, 4063493},
	{4063491, 4063492},
	{4063490, 4063491},
	{4063489, 4063490},
	{4063469, 4063489},
	{4063478, 4063469},
	{4063477, 4063478},
	{4063476, 4063477},
	{4063475, 4063476},
	{4063474, 4063475},
	{4063473, 4063474},
	{4063472, 4063473},
	{4063471, 4063472},
	{4063470, 4063471},
	{4063450, 4063470},
	{4063454, 4063450},
	{4063453, 4063454},
	{4063452, 4063453},
	{4063451, 4063452},
	{4129021, 4063451},
	{4129020, 4129021},
	{4129019, 4129020},
	{4129018, 4129019},
	{4129017, 4129018},
	{4129007, 4129017},
	{4129016, 4129007},
	{4129015, 4129016},
	{4129014, 4129015},
	{4129013, 4129014},
	{4129012, 4129013},
	{4129011, 4129012},
	{4129010, 4129011},
	{4129009, 4129010},
	{4129008, 4129009},
	{4128997, 4129008},
	{4129006, 4128997},
	{4129005, 4129006},
	{4129004, 4129005},
	{4129003, 4129004},
	{4129002, 4129003},
	{4129001, 4129002},
	{4129000, 4129001},
	{4128999, 4129000},
	{4128998, 4128999},
	{4128987, 4128998},
	{4128996, 4128987},
	{4128995, 4128996},
	{4128994, 4128995},
	{4128993, 4128994},
	{4128992, 4128993},
	{4128991, 4128992},
	{4128990, 4128991},
	{4128989, 4128990},
	{4128988, 4128989},
	{3604863, 4128988},
	{3604842, 3604863},
	{3604851, 3604842},
	{3604850, 3604851},
	{3604849, 3604850},
	{3604848, 3604849},
	{3604847, 3604848},
	{3604846, 3604847},
	{3604845, 3604846},
	{3604844, 3604845},
	{3604843, 3604844},
	{3604841, 3604565},
	{3604841, 3604843},
	{3604825, 3604841},
	{3604832, 3604825},
	{3604831, 3604832},
	{3604830, 3604831},
	{3604829, 3604830},
	{3604828, 3604829},
	{3604827, 3604828},
	{3604826, 3604827},
	{3604812, 3604826},
	{3604818, 3604812},
	{3604817, 3604818},
	{3604816, 3604817},
	{3604815, 3604816},
	{3604814, 3604815},
	{3604813, 3604814},
	{3604811, 3604813},
	{3604801, 3604811},
	{3604805, 3604801},
	{3604804, 3604805},
	{3604803, 3604804},
	{3604802, 3604803},
	{3080613, 3604802},
	{3080612, 3080613},
	{3080600, 3080612},
	{3080604, 3080600},
	{3080603, 3080604},
	{3080602, 3080603},
	{3080601, 3080602},
	{3080599, 3080601},
	{3080599, 3080337},
	{3080598, 3080599},
	{3080579, 3080598},
	{3080588, 3080579},
	{3080587, 3080588},
	{3080586, 3080587},
	{3080585, 3080586},
	{3080584, 3080585},
	{3080583, 3080584},
	{3080582, 3080583},
	{3080581, 3080582},
	{3080580, 3080581},
	{3080536, 3080580},
	{3080542, 3080536},
	{3080541, 3080542},
	{3080540, 3080541},
	{3080539, 3080540},
	{3080538, 3080539},
	{3080537, 3080538},
	{3080526, 3080537},
	{3080535, 3080526},
	{3080534, 3080535},
	{3080533, 3080534},
	{3080532, 3080533},
	{3080531, 3080532},
	{3080530, 3080531},
	{3080529, 3080530},
	{3080528, 3080529},
	{3080527, 3080528},
	{3080516, 3080527},
	{3080525, 3080516},
	{3080524, 3080525},
	{3080523, 3080524},
	{3080522, 3080523},
	{3080521, 3080522},
	{3080520, 3080521},
	{3080519, 3080520},
	{3080518, 3080519},
	{3080517, 3080518},
	{3080515, 3080517},
	{3080508, 3080515},
	{3080514, 3080508},
	{3080513, 3080514},
	{3080512, 3080513},
	{3080511, 3080512},
	{3080510, 3080511},
	{3080509, 3080510},
	{3080506, 3080509},
	{3014936, 3080506},
	{3014935, 3014936},
	{3014934, 3014935},
	{3014933, 3014934},
	{3014932, 3014933},
	{3014931, 3014758},
	{3014931, 3014932},
	{3014929, 3014931},
	{3014928, 3014929},
	{3014927, 3014928},
	{3014926, 3014927},
	{3014930, 3014926},
	{3014925, 3014930},
	{3015409, 3014925},
	{3015412, 3015409},
	{3015411, 3015412},
	{3015410, 3015411},
	{3015212, 3015220},
	{3015215, 3014925},
	{3015214, 3015215},
	{3015213, 3015214},
	{3015216, 3015213},
	{3014924, 3015216},
	{3014924, 3014907},
	{3015405, 3014924},
	{3015408, 3015405},
	{3015407, 3015408},
	{3015406, 3015407},
	{3015217, 3015406},
	{3015217, 3015228},
	{3014943, 3014924},
	{3014937, 3014943},
	{3014938, 3014937},
	{3014939, 3014938},
	{3014940, 3014939},
	{3014941, 3014940},
	{3014942, 3014941},
	{3015062, 3014942},
	{3015068, 3015062},
	{3015067, 3015068},
	{3015066, 3015067},
	{3015065, 3015066},
	{3015064, 3015065},
	{3015074, 3015075},
	{3015073, 3015074},
	{3015072, 3015073},
	{3015071, 3015072},
	{3015070, 3015071},
	{3015222, 3015070},
	{3015223, 3015222},
	{3015224, 3015223},
	{3015225, 3015224},
	{3015226, 3015225},
	{3015227, 3015226},
	{3015221, 3015227},
	{3015228, 3015221},
	{3014990, 3014979},
	{3014991, 3014990},
	{3014992, 3014991},
	{3014993, 3014992},
	{3014994, 3014993},
	{3014995, 3014994},
	{3014996, 3014995},
	{3014997, 3014996},
	{3014989, 3014997},
	{3015034, 3014989},
	{3015035, 3015034},
	{3015036, 3015035},
	{3015037, 3015036},
	{3015038, 3015037},
	{3015039, 3015038},
	{3015040, 3015039},
	{3015041, 3015040},
	{3015042, 3015041},
	{3015033, 3015042},
	{3015044, 3015033},
	{3015045, 3015044},
	{3015046, 3015045},
	{3015047, 3015046},
	{3015048, 3015047},
	{3015049, 3015048},
	{3015050, 3015049},
	{3015051, 3015050},
	{3015052, 3015051},
	{3015043, 3015052},
	{3015054, 3015043},
	{3015055, 3015054},
	{3015056, 3015055},
	{3015057, 3015056},
	{3015058, 3015057},
	{3015059, 3015058},
	{3015060, 3015059},
	{3015061, 3015060},
	{3015053, 3015061},
	{3539249, 3015053},
	{3539250, 3539249},
	{3539248, 3539250},
	{3539251, 3539248},
	{3539253, 3539251},
	{3539254, 3539253},
	{3539255, 3539254},
	{3539256, 3539255},
	{3539257, 3539256},
	{3539258, 3539257},
	{3539259, 3539258},
	{3539260, 3539259},
	{3539261, 3539260},
	{3539252, 3539261},
	{3539264, 3539252},
	{3539265, 3539264},
	{3539263, 3539265},
	{3539262, 3539024},
	{3539262, 3539263},
	{3539154, 3539262},
	{3539153, 3539154},
	{3539152, 3539153},
	{3539151, 3539152},
	{3539279, 3539151},
	{3539280, 3539279},
	{3539281, 3539280},
	{3539282, 3539281},
	{3539283, 3539282},
	{3539284, 3539283},
	{3539285, 3539284},
	{3539286, 3539285},
	{3539287, 3539286},
	{3539278, 3539287},
	{3539292, 3539278},
	{3539293, 3539292},
	{3539294, 3539293},
	{3539295, 3539294},
	{3539296, 3539295},
	{3539297, 3539296},
	{3539298, 3539297},
	{4063523, 3539298},
	{4063524, 4063523},
	{4063522, 4063524},
	{4063302, 4063522},
	{4063308, 4063302},
	{4063307, 4063308},
	{4063306, 4063307},
	{4063305, 4063306},
	{4063304, 4063305},
	{4063303, 4063304},
	{4063287, 4063303},
	{4063296, 4063287},
	{4063295, 4063296},
	{4063294, 4063295},
	{4063293, 4063294},
	{4063292, 4063293},
	{4063291, 4063292},
	{4063290, 4063291},
	{4063289, 4063290},
	{4063288, 4063289},
	{4063526, 4063288},
	{4063527, 4063526},
	{4063525, 4063527},
	{4063298, 4063499},
	{4063299, 4063298},
	{4063300, 4063299},
	{4063301, 4063300},
	{4063297, 4063301},
	{4063516, 4063297},
	{4063521, 4063516},
	{4063520, 4063521},
	{4063519, 4063520},
	{4063518, 4063519},
	{4063517, 4063518},
	{3539291, 4063517},
	{3539290, 3539291},
	{3539289, 3539290},
	{3539288, 3539289},
	{3539276, 3539288},
	{3539277, 3539276},
	{3539266, 3539277},
	{3539275, 3539266},
	{3539274, 3539275},
	{3539273, 3539274},
	{3539272, 3539273},
	{3539271, 3539272},
	{3539270, 3539271},
	{3539269, 3539270},
	{3539268, 3539269},
	{3539267, 3539268},
	{3539148, 3539267},
	{3539150, 3539148},
	{3539149, 3539150},
	{3539247, 3539149},
	{3539243, 3539247},
	{3539246, 3539243},
	{3539245, 3539246},
	{3539244, 3539245},
	{3539233, 3539244},
	{3539242, 3539233},
	{3539241, 3539242},
	{3539240, 3539241},
	{3539239, 3539240},
	{3539238, 3539239},
	{3539237, 3539238},
	{3539236, 3539237},
	{3539235, 3539236},
	{3539234, 3539235},
	{3539232, 3539234},
	{3539232, 3539089},
	{3539230, 3539232},
	{3539231, 3539230},
	{3015026, 3539231},
	{3015032, 3015026},
	{3015031, 3015032},
	{3015030, 3015031},
	{3015029, 3015030},
	{3015028, 3015029},
	{3015027, 3015028},
	{3015016, 3015027},
	{3015025, 3015016},
	{3015024, 3015025},
	{3015023, 3015024},
	{3015022, 3015023},
	{3015021, 3015022},
	{3015020, 3015021},
	{3015019, 3015020},
	{3015018, 3015019},
	{3015017, 3015018},
	{3015006, 3015017},
	{3015015, 3015006},
	{3015014, 3015015},
	{3015013, 3015014},
	{3015012, 3015013},
	{3015011, 3015012},
	{3015010, 3015011},
	{3015009, 3015010},
	{3015008, 3015009},
	{3015007, 3015008},
	{3014981, 3015007},
	{3014988, 3014981},
	{3014987, 3014988},
	{3014986, 3014987},
	{3014985, 3014986},
	{3014984, 3014985},
	{3014923, 3014925},
	{3014922, 3014923},
	{3014917, 3014922},
	{3014921, 3014917},
	{3014920, 3014921},
	{3014919, 3014920},
	{3014918, 3014919},
	{3014916, 3014918},
	{3014913, 3014916},
	{3014915, 3014913},
	{3014914, 3014915},
	{3014912, 3014914},
	{3014908, 3014912},
	{3014909, 3014908},
	{3014911, 3014909},
	{3014910, 3014911},
	{3015205, 3014910},
	{3014890, 3015205},
	{3014894, 3014890},
	{3014893, 3014894},
	{3014892, 3014893},
	{3014891, 3014892},
	{3014889, 3014891},
	{3015196, 3014889},
	{3015197, 3015196},
	{3015198, 3015197},
	{3015195, 3015198},
	{3015194, 3015195},
	{3014884, 3015194},
	{3014888, 3014884},
	{3014887, 3014888},
	{3014886, 3014887},
	{3014885, 3014886},
	{3014864, 3014885},
	{3014861, 3014864},
	{3014863, 3014861},
	{3014862, 3014863},
	{3014860, 3014862},
	{3015193, 3014860},
	{3014857, 3015193},
	{3014859, 3014857},
	{3014858, 3014859},
	{3539228, 3014858},
	{3539167, 3539228},
	{3539169, 3539167},
	{3539170, 3539169},
	{3539171, 3539170},
	{3539172, 3539171},
	{3539173, 3539172},
	{3539168, 3539173},
	{3539174, 3539168},
	{3539176, 3539174},
	{3539177, 3539176},
	{3539178, 3539177},
	{3539175, 3539178},
	{3539179, 3539175},
	{3539457, 3539179},
	{3539222, 3539457},
	{3539224, 3539222},
	{3539225, 3539224},
	{3539226, 3539225},
	{3539223, 3539226},
	{3539227, 3539223},
	{3539363, 3539227},
	{3539364, 3539363},
	{3539365, 3539364},
	{3539366, 3539365},
	{3539368, 3539366},
	{3539367, 3539368},
	{3539675, 3539367},
	{3539677, 3539675},
	{3539678, 3539677},
	{3539679, 3539678},
	{3539680, 3539679},
	{3539676, 3539680},
	{3539357, 3539676},
	{3539350, 3539357},
	{3539356, 3539350},
	{3539355, 3539356},
	{3539354, 3539355},
	{3539353, 3539354},
	{3539352, 3539353},
	{3539351, 3539352},
	{3539331, 3539351},
	{3539331, 3539729},
	{3539333, 3539331},
	{3539334, 3539333},
	{3539335, 3539334},
	{3539336, 3539335},
	{3539337, 3539336},
	{3539338, 3539337},
	{3539339, 3539338},
	{3539332, 3539339},
	{3539306, 3539332},
	{3539316, 3539306},
	{3539317, 3539316},
	{3539318, 3539317},
	{3539319, 3539318},
	{3539320, 3539319},
	{3539321, 3539320},
	{3539315, 3539321},
	{3539012, 3539315},
	{4063286, 3539012},
	{4063285, 4063286},
	{4063284, 4063285},
	{4063283, 4063284},
	{4063424, 4063283},
	{4063433, 4063424},
	{4063434, 4063433},
	{4063435, 4063434},
	{4063436, 4063435},
	{4063437, 4063436},
	{4063438, 4063437},
	{4063439, 4063438},
	{4063432, 4063439},
	{4063740, 4063432},
	{4063269, 4063400},
	{4063271, 4063269},
	{4063270, 4063271},
	{3539011, 4063270},
	{3539307, 3539011},
	{3539314, 3539307},
	{3539313, 3539314},
	{3539308, 3539313},
	{3539309, 3539308},
	{3539310, 3539309},
	{3539311, 3539310},
	{3539312, 3539311},
	{3539305, 3539312},
	{3539322, 3539305},
	{3539323, 3539322},
	{3539304, 3539119},
	{3539304, 3539323},
	{3539342, 3539304},
	{3539343, 3539342},
	{3539344, 3539343},
	{3539345, 3539344},
	{3539346, 3539345},
	{3539347, 3539346},
	{3539341, 3539347},
	{3539340, 3539341},
	{3539340, 3539730},
	{3539349, 3539340},
	{3539348, 3539349},
	{3539369, 3539348},
	{3539426, 3539369},
	{3539427, 3539426},
	{3539428, 3539427},
	{3539430, 3539428},
	{3539429, 3539430},
	{3539453, 3539429},
	{3539454, 3539453},
	{3539455, 3539454},
	{3539413, 3539455},
	{3539362, 3539413},
	{3539361, 3539362},
	{3539360, 3539361},
	{3539359, 3539360},
	{3539358, 3539359},
	{3539456, 3539358},
	{3539156, 3539456},
	{3539157, 3539156},
	{3539155, 3539157},
	{3539158, 3539155},
	{3539164, 3539158},
	{3539165, 3539164},
	{3539166, 3539165},
	{3539163, 3539166},
	{3539432, 3539163},
	{3539433, 3539432},
	{3539439, 3539433},
	{3539438, 3539439},
	{3539437, 3539438},
	{3539436, 3539437},
	{3539435, 3539436},
	{3539434, 3539435},
	{3539431, 3539434},
	{3539229, 3539431},
	{3014867, 3539229},
	{3014866, 3014867},
	{3014865, 3014866},
	{3014868, 3014865},
	{3014870, 3014868},
	{3014871, 3014870},
	{3014869, 3014871},
	{3015192, 3014869},
	{3014878, 3015192},
	{3014872, 3014878},
	{3014873, 3014872},
	{3014874, 3014873},
	{3014875, 3014874},
	{3014876, 3014875},
	{3014877, 3014876},
	{3014879, 3015107},
	{3014879, 3014877},
	{3014881, 3014879},
	{3014882, 3014881},
	{3014883, 3014882},
	{3014880, 3014883},
	{3015188, 3014880},
	{3015189, 3015188},
	{3015191, 3015189},
	{3015190, 3015191},
	{3014895, 3015190},
	{3014896, 3014895},
	{3014898, 3014896},
	{3014899, 3014898},
	{3014897, 3014899},
	{3015206, 3014897},
	{3015207, 3015206},
	{3015211, 3015207},
	{3015210, 3015211},
	{3015209, 3015210},
	{3015208, 3015209},
	{3014900, 3015208},
	{3014902, 3014900},
	{3014903, 3014902},
	{3014904, 3014903},
	{3014905, 3014904},
	{3014906, 3014905},
	{3014901, 3014906},
	{3014907, 3014901},
	{3539059, 3539251},
	{3473589, 3473588},
	{3473593, 3473589},
	{3473592, 3473593},
	{3473591, 3473592},
	{3473590, 3473591},
	{3473487, 3473590},
	{3997762, 3473487},
	{3997763, 3997762},
	{3997764, 3997763},
	{3997765, 3997764},
	{3997761, 3997765},
	{3997760, 3997761},
	{3997759, 3997760},
	{3997767, 3997759},
	{3997768, 3997767},
	{3997769, 3997768},
	{3997770, 3997769},
	{3997771, 3997770},
	{3997772, 3997771},
	{3997766, 3997772},
	{3997774, 3997766},
	{3997775, 3997774},
	{3997776, 3997775},
	{3997777, 3997776},
	{3997778, 3997777},
	{3997773, 3997778},
	{3997779, 3997781},
	{3997779, 3997773},
	{3997780, 3997855},
	{3997784, 3997780},
	{3997783, 3997784},
	{3997782, 3997783},
	{3997781, 3997782},
	{3997785, 3997895},
	{3997788, 3997785},
	{3997787, 3997788},
	{3997786, 3997787},
	{3997789, 3997786},
	{2949175, 2949295},
	{2949176, 2949175},
	{2949177, 2949176},
	{2949178, 2949177},
	{2949179, 2949178},
	{2949180, 2949179},
	{2949181, 2949180},
	{2949182, 2949181},
	{2949191, 2949158},
	{2949191, 2949182},
	{2949192, 2949191},
	{2949205, 2949192},
	{2949211, 2949205},
	{2949210, 2949211},
	{2949209, 2949210},
	{2949208, 2949209},
	{2949207, 2949208},
	{2949206, 2949207},
	{2425064, 2949206},
	{2425061, 2425054},
	{2425062, 2425061},
	{2425063, 2425062},
	{2949202, 2425063},
	{2949203, 2949202},
	{2949204, 2949203},
	{2949201, 2949204},
	{2949190, 2949201},
	{2949183, 2949190},
	{2949184, 2949183},
	{2949189, 2949184},
	{2949188, 2949189},
	{2949187, 2949188},
	{2949186, 2949187},
	{2949185, 2949186},
	{2949132, 2949190},
	{2949135, 2949132},
	{2949136, 2949135},
	{2949137, 2949136},
	{2949138, 2949137},
	{2949139, 2949138},
	{2949140, 2949139},
	{2949134, 2949140},
	{2949133, 2949134},
	{2949142, 2949133},
	{2949143, 2949142},
	{2949144, 2949143},
	{2949145, 2949144},
	{2949146, 2949145},
	{2949147, 2949146},
	{2949148, 2949147},
	{2949149, 2949148},
	{2949150, 2949149},
	{2949141, 2949150},
	{2949152, 2949141},
	{2949153, 2949152},
	{2949154, 2949153},
	{2949155, 2949154},
	{2949151, 2949155},
	{2949165, 2949335},
	{2949174, 2949165},
	{2949173, 2949174},
	{2949172, 2949173},
	{2949171, 2949172},
	{2949170, 2949171},
	{2949169, 2949170},
	{2949168, 2949169},
	{2949167, 2949168},
	{2949156, 2949166},
	{2949157, 2949156},
	{2949164, 2949157},
	{2949163, 2949164},
	{2949162, 2949163},
	{2949161, 2949162},
	{2949160, 2949161},
	{2949159, 2949160},
	{2949158, 2949159},
	{2425070, 2425064},
	{2425069, 2425070},
	{2425068, 2425069},
	{2425067, 2425068},
	{2425066, 2425067},
	{2425065, 2425066},
	{2424832, 2425065},
	{2424834, 2424832},
	{2424833, 2424834},
	{2359305, 2424833},
	{2359300, 2359305},
	{2359301, 2359300},
	{2359302, 2359301},
	{2359303, 2359302},
	{2359304, 2359303},
	{2359478, 2359304},
	{2359479, 2359478},
	{2359480, 2359479},
	{2359481, 2359480},
	{2359482, 2359481},
	{2883830, 2359482},
	{2883829, 2883830},
	{2883689, 2883829},
	{2883599, 2883689},
	{2883600, 2883599},
	{2883690, 2883662},
	{2883690, 2883600},
	{2359296, 2883690},
	{2359297, 2359296},
	{2359299, 2359297},
	{2359298, 2359299},
	{2359334, 2359298},
	{2293976, 2359334},
	{2293977, 2293976},
	{2293984, 2293977},
	{2293983, 2293984},
	{2293982, 2293983},
	{2293981, 2293982},
	{2293980, 2293981},
	{2293979, 2293980},
	{2293978, 2293979},
	{2293789, 2293781},
	{2293789, 2293978},
	{2293762, 2293789},
	{2293760, 2293762},
	{2293761, 2293760},
	{2293763, 2293761},
	{2293768, 2293763},
	{2293767, 2293768},
	{2293766, 2293767},
	{2293765, 2293766},
	{2293764, 2293765},
	{2228240, 2293764},
	{2228239, 2228240},
	{2752543, 2228239},
	{2752544, 2752543},
	{2752545, 2752544},
	{2752550, 2752545},
	{2752549, 2752550},
	{2752548, 2752549},
	{2752547, 2752548},
	{2752546, 2752547},
	{2752748, 2752546},
	{2752749, 2752748},
	{2752747, 2752749},
	{2752746, 2752747},
	{2752794, 2752746},
	{2752795, 2752794},
	{2752793, 2752795},
	{2752665, 2752793},
	{2752537, 2752665},
	{2752538, 2752537},
	{2752542, 2752538},
	{2752541, 2752542},
	{2752540, 2752541},
	{2752539, 2752540},
	{2752667, 2752627},
	{2752667, 2752539},
	{2752533, 2752667},
	{2752536, 2752533},
	{2752535, 2752536},
	{2752534, 2752535},
	{2752530, 2752534},
	{2752532, 2752530},
	{2752531, 2752532},
	{3276815, 2752531},
	{3276814, 3276815},
	{3276813, 3276814},
	{3276812, 3276813},
	{3276811, 3276812},
	{3276810, 3276811},
	{3276809, 3276810},
	{3277108, 3276809},
	{3276808, 3277108},
	{3276803, 3276808},
	{3276807, 3276803},
	{3276806, 3276807},
	{3276805, 3276806},
	{3276804, 3276805},
	{3276800, 3276804},
	{3276802, 3276800},
	{3276801, 3276802},
	{3211287, 3276801},
	{3211286, 3211287},
	{3211285, 3211286},
	{3211284, 3211285},
	{3211283, 3211284},
	{3211282, 3211283},
	{3211281, 3211282},
	{3211273, 3211281},
	{3211274, 3211273},
	{3211275, 3211274},
	{3211280, 3211275},
	{3211279, 3211280},
	{3211278, 3211279},
	{3211277, 3211278},
	{3211276, 3211277},
	{3211385, 3211276},
	{3211385, 3211351},
	{3211265, 3211385},
	{3211272, 3211265},
	{3211271, 3211272},
	{3211270, 3211271},
	{3211269, 3211270},
	{3211268, 3211269},
	{3211267, 3211268},
	{3211266, 3211267},
	{3211264, 3211266},
	{3735571, 3211264},
	{3735570, 3735571},
	{3735569, 3735570},
	{3735566, 3735567},
	{3735565, 3735566},
	{3735564, 3735565},
	{3735557, 3735564},
	{3735558, 3735557},
	{3735563, 3735558},
	{3735562, 3735563},
	{3735561, 3735562},
	{3735560, 3735561},
	{3735559, 3735560},
	{3735769, 3735559},
	{3735769, 3735589},
	{3735552, 3735769},
	{3735556, 3735552},
	{3735555, 3735556},
	{3735554, 3735555},
	{3735553, 3735554},
	{3670039, 3735553},
	{3670040, 3670039},
	{3670041, 3670040},
	{3670042, 3670041},
	{3670043, 3670042},
	{3670044, 3670043},
	{3670037, 3670044},
	{3670045, 3670037},
	{3670038, 3670045},
	{3670036, 3670038},
	{3670150, 3670036},
	{3670151, 3670150},
	{3670152, 3670151},
	{3670153, 3670152},
	{3670154, 3670153},
	{3670155, 3670154},
	{3670156, 3670155},
	{3670157, 3670156},
	{3670158, 3670157},
	{3670149, 3670158},
	{3670160, 3670149},
	{3670161, 3670160},
	{3670162, 3670161},
	{3670163, 3670162},
	{3670164, 3670163},
	{3670159, 3670164},
	{3670021, 3670159},
	{3670022, 3670021},
	{3670023, 3670022},
	{3670024, 3670023},
	{3670025, 3670024},
	{3670269, 3670025},
	{3670270, 3670269},
	{3670271, 3670270},
	{3670272, 3670271},
	{3670273, 3670272},
	{3670274, 3670273},
	{3670275, 3670274},
	{3670268, 3670275},
	{3670259, 3670268},
	{3670260, 3670259},
	{3670261, 3670260},
	{3670258, 3670261},
	{3670262, 3670258},
	{3670258, 3670262},
	{3670264, 3670262},
	{3670148, 3670262},
	{3670144, 3670148},
	{3670147, 3670144},
	{3670146, 3670147},
	{3670145, 3670146},
	{3670135, 3670145},
	{3670143, 3670135},
	{3670142, 3670143},
	{3670141, 3670142},
	{3670140, 3670141},
	{3670139, 3670140},
	{3670138, 3670139},
	{3670137, 3670138},
	{3670136, 3670137},
	{3145747, 3670136},
	{3145737, 3145747},
	{3145746, 3145737},
	{3145745, 3145746},
	{3145744, 3145745},
	{3145743, 3145744},
	{3145742, 3145743},
	{3145741, 3145742},
	{3145740, 3145741},
	{3145739, 3145740},
	{3145738, 3145739},
	{3145855, 3145738},
	{3145856, 3145855},
	{3145855, 3145856},
	{3145740, 3145739},
	{3145741, 3145740},
	{3145742, 3145741},
	{3145743, 3145742},
	{3145744, 3145743},
	{3145745, 3145744},
	{3145746, 3145745},
	{3145737, 3145746},
	{3145747, 3145737},
	{3670136, 3145747},
	{3670137, 3670136},
	{3670138, 3670137},
	{3670139, 3670138},
	{3670140, 3670139},
	{3670141, 3670140},
	{3670142, 3670141},
	{3670143, 3670142},
	{3670135, 3670143},
	{3670145, 3670135},
	{3670146, 3670145},
	{3670147, 3670146},
	{3670144, 3670147},
	{3670148, 3670144},
	{3670262, 3670148},
	{3670253, 3670254},
	{3670254, 3670253},
	{3670257, 3670254},
	{3670256, 3670257},
	{3670255, 3670256},
	{3670016, 3670255},
	{3670017, 3670016},
	{3670018, 3670017},
	{3670019, 3670018},
	{3670020, 3670019},
	{3145729, 3670020},
	{3145728, 3145729},
	{3145731, 3145728},
	{3145732, 3145731},
	{3145733, 3145732},
	{3145734, 3145733},
	{3145735, 3145734},
	{3145736, 3145735},
	{3145730, 3145736},
	{3145793, 3145730},
	{3145800, 3145793},
	{3145793, 3145800},
	{3145730, 3145793},
	{3145736, 3145730},
	{3145735, 3145736},
	{3145734, 3145735},
	{3145733, 3145734},
	{3145732, 3145733},
	{3145731, 3145732},
	{3145728, 3145731},
	{3145729, 3145728},
	{3670020, 3145729},
	{3670019, 3670020},
	{3670018, 3670019},
	{3670017, 3670018},
	{3670016, 3670017},
	{3670255, 3670016},
	{3670256, 3670255},
	{3670257, 3670256},
	{3670254, 3670257},
	{3670126, 3670253},
	{3670134, 3670126},
	{3670133, 3670134},
	{3670132, 3670133},
	{3670131, 3670132},
	{3670130, 3670131},
	{3670129, 3670130},
	{3670128, 3670129},
	{3670127, 3670128},
	{3670029, 3670127},
	{3670028, 3670029},
	{3670027, 3670028},
	{3670026, 3670027},
	{3670030, 3670026},
	{3670031, 3670030},
	{3670032, 3670031},
	{3670033, 3670032},
	{3670034, 3670033},
	{3670035, 3670034},
	{3670165, 3670035},
	{3670172, 3670165},
	{3670174, 3670172},
	{3670173, 3670174},
	{3670171, 3670173},
	{3670170, 3670171},
	{3670169, 3670170},
	{3670168, 3670169},
	{3670167, 3670168},
	{3670166, 3670167},
	{3670046, 3670166},
	{3670047, 3670046},
	{3670054, 3670047},
	{3670053, 3670054},
	{3670052, 3670053},
	{3670051, 3670052},
	{3670050, 3670051},
	{3670049, 3670050},
	{3670048, 3670049},
	{3735579, 3670048},
	{3735588, 3735579},
	{3735587, 3735588},
	{3735586, 3735587},
	{3735585, 3735586},
	{3735584, 3735585},
	{3735583, 3735584},
	{3735582, 3735583},
	{3735581, 3735582},
	{3735580, 3735581},
	{3735572, 3735580},
	{3735578, 3735572},
	{3735577, 3735578},
	{3735576, 3735577},
	{3735575, 3735576},
	{3735574, 3735575},
	{3735573, 3735574},
	{3211313, 3735573},
	{3211312, 3211313},
	{3211303, 3211312},
	{3211304, 3211303},
	{3211311, 3211304},
	{3211310, 3211311},
	{3211309, 3211310},
	{3211308, 3211309},
	{3211307, 3211308},
	{3211306, 3211307},
	{3211305, 3211306},
	{3211386, 3211305},
	{3211297, 3211386},
	{3211302, 3211297},
	{3211301, 3211302},
	{3211300, 3211301},
	{3211299, 3211300},
	{3211298, 3211299},
	{3211288, 3211298},
	{3211289, 3211288},
	{3211296, 3211289},
	{3211295, 3211296},
	{3211294, 3211295},
	{3211293, 3211294},
	{3211292, 3211293},
	{3211291, 3211292},
	{3211290, 3211291},
	{3211384, 3211290},
	{3211384, 3211362},
	{3211387, 3211384},
	{3211388, 3211387},
	{3211389, 3211388},
	{3211390, 3211389},
	{3277114, 3211390},
	{3277113, 3277114},
	{3276821, 3277113},
	{3276828, 3276821},
	{3276827, 3276828},
	{3276826, 3276827},
	{3276825, 3276826},
	{3276824, 3276825},
	{3276823, 3276824},
	{3276822, 3276823},
	{3276816, 3276822},
	{3276817, 3276816},
	{3276818, 3276817},
	{3276819, 3276818},
	{3276820, 3276819},
	{2752566, 3276820},
	{2752565, 2752566},
	{2752702, 2752565},
	{2752706, 2752702},
	{2752705, 2752706},
	{2752704, 2752705},
	{2752703, 2752704},
	{2752668, 2752703},
	{2752708, 2752668},
	{2752709, 2752708},
	{2752710, 2752709},
	{2752711, 2752710},
	{2752712, 2752711},
	{2752713, 2752712},
	{2752714, 2752713},
	{2752715, 2752714},
	{2752668, 2752687},
	{2752707, 2752715},
	{2752557, 2752707},
	{2752559, 2752558},
	{2752564, 2752559},
	{2752563, 2752564},
	{2752562, 2752563},
	{2752561, 2752562},
	{2752560, 2752561},
	{2752666, 2752560},
	{2752666, 2752650},
	{2752787, 2752666},
	{2752792, 2752787},
	{2752791, 2752792},
	{2752790, 2752791},
	{2752789, 2752790},
	{2752788, 2752789},
	{2752551, 2752788},
	{2752556, 2752551},
	{2752555, 2752556},
	{2752554, 2752555},
	{2752553, 2752554},
	{2752552, 2752553},
	{2228227, 2752552},
	{2228226, 2228227},
	{2228225, 2228226},
	{2228290, 2228225},
	{2228293, 2228292},
	{2228292, 2228290},
	{2228294, 2228293},
	{2228291, 2228294},
	{2293770, 2228291},
	{2293769, 2293770},
	{2293778, 2293769},
	{2293777, 2293778},
	{2293776, 2293777},
	{2293775, 2293776},
	{2293774, 2293775},
	{2293773, 2293774},
	{2293772, 2293773},
	{2293771, 2293772},
	{2293788, 2293771},
	{2293985, 2293788},
	{2293992, 2293985},
	{2293991, 2293992},
	{2293990, 2293991},
	{2293989, 2293990},
	{2293988, 2293989},
	{2293987, 2293988},
	{2293986, 2293987},
	{2359333, 2293986},
	{2359333, 2359320},
	{2359319, 2359333},
	{2359318, 2359319},
	{2359313, 2359318},
	{2359314, 2359313},
	{2359317, 2359314},
	{2883604, 2359317},
	{2883603, 2883604},
	{2883602, 2883603},
	{2883601, 2883602},
	{2359316, 2883601},
	{2359315, 2359316},
	{2359450, 2359315},
	{2359450, 2359438},
	{2359451, 2359450},
	{2359456, 2359451},
	{2359455, 2359456},
	{2359454, 2359455},
	{2359453, 2359454},
	{2359452, 2359453},
	{2359306, 2359452},
	{2359312, 2359306},
	{2359311, 2359312},
	{2359310, 2359311},
	{2359309, 2359310},
	{2359308, 2359309},
	{2359307, 2359308},
	{2424837, 2359307},
	{2424836, 2424837},
	{2424835, 2424836},
	{2425055, 2424835},
	{2425056, 2425055},
	{2425057, 2425056},
	{2425058, 2425057},
	{2425059, 2425058},
	{2425060, 2425059},
	{2425054, 2425060},
	{3997899, 3997779},
	{3997900, 3997899},
	{3997901, 3997900},
	{3997902, 3997901},
	{3997903, 3997902},
	{3997904, 3997903},
	{3997898, 3997904},
	{3997924, 3997898},
	{3997925, 3997924},
	{3997926, 3997925},
	{3997927, 3997926},
	{3997928, 3997927},
	{3997929, 3997928},
	{3997930, 3997929},
	{3997931, 3997930},
	{3997932, 3997931},
	{3997923, 3997932},
	{3997933, 3997923},
	{3997934, 3997933},
	{3997935, 3997934},
	{3997936, 3997935},
	{3997937, 3997936},
	{3932240, 3997937},
	{3932241, 3932240},
	{3932242, 3932241},
	{3932243, 3932242},
	{3932244, 3932243},
	{3932245, 3932244},
	{3932239, 3932245},
	{3932267, 3932239},
	{3932268, 3932267},
	{3932269, 3932268},
	{3932270, 3932269},
	{3932271, 3932270},
	{3932272, 3932271},
	{3932273, 3932272},
	{3932274, 3932273},
	{3932275, 3932274},
	{3932266, 3932275},
	{3932277, 3932266},
	{3932278, 3932277},
	{3932279, 3932278},
	{3932280, 3932279},
	{3932281, 3932280},
	{3932276, 3932281},
	{3932282, 3932276},
	{3932283, 3932282},
	{3407942, 3932283},
	{3407941, 3407942},
	{3407940, 3407941},
	{3407939, 3407940},
	{3407964, 3407939},
	{3407968, 3407964},
	{3407967, 3407968},
	{3407966, 3407967},
	{3407965, 3407966},
	{3407954, 3407965},
	{3407963, 3407954},
	{3407962, 3407963},
	{3407961, 3407962},
	{3407960, 3407961},
	{3407959, 3407960},
	{3407958, 3407959},
	{3407957, 3407958},
	{3407956, 3407957},
	{3407955, 3407956},
	{3407943, 3407955},
	{3407970, 3407943},
	{3407971, 3407970},
	{3407972, 3407971},
	{3407973, 3407972},
	{3407974, 3407973},
	{3407975, 3407974},
	{3407976, 3407975},
	{3407977, 3407976},
	{3407978, 3407977},
	{3407969, 3407978},
	{3407980, 3407969},
	{3407981, 3407980},
	{3407982, 3407981},
	{3407983, 3407982},
	{3407984, 3407983},
	{3407985, 3407984},
	{3407986, 3407985},
	{3407979, 3407986},
	{3932285, 3407979},
	{3932286, 3932285},
	{3932284, 3932286},
	{3932258, 3932284},
	{3932265, 3932258},
	{3932264, 3932265},
	{3932263, 3932264},
	{3932262, 3932263},
	{3932261, 3932262},
	{3932260, 3932261},
	{3932259, 3932260},
	{3932288, 3932259},
	{3932289, 3932288},
	{3932287, 3932289},
	{3932249, 3932287},
	{3932257, 3932249},
	{3932256, 3932257},
	{3932255, 3932256},
	{3932254, 3932255},
	{3932253, 3932254},
	{3932252, 3932253},
	{3932251, 3932252},
	{3932250, 3932251},
	{3932248, 3932192},
	{3932248, 3932250},
	{3932246, 3932248},
	{3932247, 3932246},
	{3997915, 3932247},
	{3997922, 3997915},
	{3997921, 3997922},
	{3997920, 3997921},
	{3997919, 3997920},
	{3997918, 3997919},
	{3997917, 3997918},
	{3997916, 3997917},
	{3997905, 3997916},
	{3997914, 3997905},
	{3997913, 3997914},
	{3997912, 3997913},
	{3997911, 3997912},
	{3997910, 3997911},
	{3997909, 3997910},
	{3997908, 3997909},
	{3997907, 3997908},
	{3997906, 3997907},
	{3997894, 3997906},
	{3997897, 3997894},
	{3997896, 3997897},
	{3997895, 3997896},
	{2359424, 2359433},
	{2359459, 2359458},
	{2359459, 2359424},
	{2294141, 2294137},
	{2294140, 2294141},
	{2294140, 2294139},
	{2752661, 2752662},
	{2752661, 2752660},
	{2752672, 2752671},
	{2752672, 2752673},
	{2294139, 2294138},
	{2294138, 2294127},
	{2359433, 2359432},
	{2359432, 2359431},
	{3866944, 3866946},
	{2883691, 2883677},
	{2883677, 2883678},
	{2883678, 2883679},
	{2883679, 2883680},
	{2883680, 2883676},
	{2883676, 2883675},
	{2883675, 2883693},
	{2883693, 2883689},
	{2818190, 2818191},
	{2818204, 2818229},
	{2818211, 2818221},
	{2818203, 2818195},
	{2818206, 2818210},
	{2818460, 2818213},
	
	{3015395, 3014879},
	{3014868, 3015079},
}

gpsRoute = false
gpsThread = false
gpsWaypoints = {}
nextWp = false
turnAround = false
currentWaypoint = false
waypointInterpolation = false
waypointEndInterpolation = false
reRouting = false

local gpsColshapes = false
local colshapeElements = {}
local routeInstructions = {}

local checkForRerouteTimer = false
local rerouteCheckTime = 1000

addEventHandler("onClientResourceStart", getResourceRootElement(),
	function ()
		for _, node in ipairs(disallowedNodes) do
			local area = math.floor(node[1] / 65536)
			local defaultNeighbours = shallowcopy(vehicleNodes[area][node[1]].neighbours)
			
			vehicleNodes[area][node[1]].neighbours = {}
			
			for k, v in pairs(defaultNeighbours) do
				if k ~= node[2] then
					vehicleNodes[area][node[1]].neighbours[k] = v
				end
			end
		end
		
		if occupiedVehicle then
			if getElementData(occupiedVehicle, "gpsDestination") then
				local destination = getElementData(occupiedVehicle, "gpsDestination")
				gpsThread = coroutine.create(makeRoute)
				coroutine.resume(gpsThread, destination[1], destination[2], true)
			end
		end
	end
)

addCommandHandler("tognodes",
	function ()
		if getElementData(localPlayer, "admin >> level") >= 10 then
			if isEventHandlerAdded("onClientRender", root, renderTheNodes) then
				removeEventHandler("onClientRender", root, renderTheNodes)
			else
				addEventHandler("onClientRender", root, renderTheNodes)
			end
		end
	end
)

function renderTheNodes()
	local playerPosX, playerPosY, playerPosZ = getElementPosition(localPlayer)
	local areaID = floor((playerPosY + 3000) / 750) * 8 + floor((playerPosX + 3000) / 750)
	local drawn = {}
	
	for id, node in pairs(vehicleNodes[areaID]) do
		if getDistanceBetweenPoints3D(playerPosX, playerPosY, playerPosZ, node.x, node.y, playerPosZ) < 100 then
			local screenX, screenY = getScreenFromWorldPosition(node.x, node.y, node.z)
			
			if screenX and screenY then
				dxDrawText(tostring(id), screenX - 10, screenY - 5);
			end
			
			for neighbour in pairs(node.neighbours) do
				if not drawn[neighbour .. "-" .. id] then
					local nodeNeighbour = vehicleNodes[floor(neighbour / 65536)][neighbour]
					
					dxDrawLine3D(node.x, node.y, node.z + 1, nodeNeighbour.x, nodeNeighbour.y, nodeNeighbour.z + 1, tocolor(sColor[1],sColor[2],sColor[3]), 5)
					drawn[id .. "-" .. neighbour] = true
				end
			end
		end
	end
end

function makeRoute(destinationX, destinationY, uTurned)
	waypointInterpolation = false
	
	if isElement(currentGPSSound) then
		destroyElement(currentGPSSound)
	end
	
	if isTimer(currentGPSSoundTimer) then
		killTimer(currentGPSSoundTimer)
	end
	
	if isTimer(checkForRerouteTimer) then
		killTimer(checkForRerouteTimer)
	end
	
	clearGPSRoute()
	gpsWaypoints = {}
	turnAround = false
	gpsLines = {}
	gpsRoute = false
	
	if gpsColshapes then
		for k, v in pairs(gpsColshapes) do
			colshapeElements[gpsColshapes[k]] = nil
			
			if isElement(v) then
				destroyElement(v)
			end
				
			gpsColshapes[k] = nil
		end
	end
	
	gpsColshapes = {}
	colshapeElements = {}
	
	if not occupiedVehicle then
		return
	end
	
	local vehiclePosX, vehiclePosY = getElementPosition(occupiedVehicle)
	
	local currentZoneName = getZoneName(vehiclePosX, vehiclePosY, 0)
	local currentCityName = getZoneName(vehiclePosX, vehiclePosY, 0, true)
	local zoneName = getZoneName(destinationX, destinationY, 0)
	local cityName = getZoneName(destinationX, destinationY, 0, true)
	local disallowedZones = {
		["Unkown"] = true,
		["Las Venturas"] = true,
	}
		
	if disallowedZones[zoneName] or disallowedZones[cityName] then
		exports.fv_infobox:addNotification("error","No route found for the selected destination.");
		setElementData(occupiedVehicle, "gpsDestination", false)
		return false
	end
	
	local routePath = calculateRoute(vehiclePosX, vehiclePosY, destinationX, destinationY)
	
	if not routePath then
		if not uTurned then
			setElementData(occupiedVehicle, "gpsDestination", false)
			exports.fv_infobox:addNotification("error","No route found for the selected destination.");
			return false;
		end
		
		setElementData(occupiedVehicle, "gpsDestination", false)
		return false
	end
	
	gpsRoute = routePath
	nextWp = 1
	currentWaypoint = 0
	currentNode = 1
	checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
	local waypointTurns = {}

	for i, node in ipairs(gpsRoute) do
		local nextNode = gpsRoute[i + 1]
		local previousNode = gpsRoute[i - 1]
		
		if i > 1 and i < #gpsRoute then
			for k in pairs(node.neighbours) do
				if previousNode and nextNode and k ~= previousNode.id and k ~= nextNode.id then
					local turnAngle = math.deg(getAngle(node.x - previousNode.x, node.y - previousNode.y, nextNode.x - node.x, nextNode.y - node.y))
					
					if turnAngle > 10 then
						table.insert(waypointTurns, {i, "right"})
						break
					end
					
					if turnAngle < -10 then
						table.insert(waypointTurns, {i, "left"})
					end
					
					break
				end
			end
		end
		
		gpsColshapes[i] = createColTube(node.x, node.y, node.z - 0.3, 8, 5)
		colshapeElements[gpsColshapes[i]] = i
		addGPSLine(node.x, node.y, node.z)
	end 
	
	local lastTurnNodeId = 1
	local nextTurnId = 1
	local nextTurnNode = 1
	if waypointTurns[1] and waypointTurns[1][1] then 
		nextTurnNode = waypointTurns[1][1];
	end

	for turn = 1, #waypointTurns do
		local nextTurnNodeId = waypointTurns[nextTurnId][1]
		nextTurnNode = waypointTurns[turn][1]
		
		if turn == 1 then
			nextTurnNode = 1
			nextTurnId = 1
			lastTurnNodeId = 1
			nextTurnNodeId = 1
		end
		
		local distanceBetweenWaypoints = 0 + getDistanceBetweenPoints2D(gpsRoute[nextTurnNode].x, gpsRoute[nextTurnNode].y, gpsRoute[waypointTurns[nextTurnId][1]].x, gpsRoute[waypointTurns[nextTurnId][1]].y)
		
		if distanceBetweenWaypoints > 600 then
			if turn == 1 then
				nextTurnNode = waypointTurns[turn][1]
			end
			
			for i = lastTurnNodeId, tonumber(nextTurnNode) or #gpsRoute do
				if 0 + getDistanceBetweenPoints2D(gpsRoute[i].x, gpsRoute[i].y, gpsRoute[nextTurnNodeId].x, gpsRoute[nextTurnNodeId].y) > distanceBetweenWaypoints - 500 then
					table.insert(gpsWaypoints, {i, "forward"})
					break
				end
			end
		end

		lastTurnNodeId = waypointTurns[turn][1]
		nextTurnId = turn
		
		table.insert(gpsWaypoints, waypointTurns[turn])
	end
	
	table.insert(gpsWaypoints, {"end", "end"})
	
	for i = 1, tonumber(gpsWaypoints[nextWp][1]) or #gpsRoute do
		gpsWaypoints[nextWp][3] = getDistanceBetweenPoints2D(gpsRoute[i].x, gpsRoute[i].y, gpsRoute[1].x, gpsRoute[1].y) / 0.9
	end
	
	local vehicleOffsetX, vehicleOffsetY = getPositionFromElementOffset(occupiedVehicle, -1, 0, 0)
	local vehicleAngle = math.deg(getAngle(gpsRoute[2].x - gpsRoute[1].x, gpsRoute[2].y - gpsRoute[1].y, vehicleOffsetX - vehiclePosX, vehicleOffsetY - vehiclePosY))
	
	if vehicleAngle > 0 then
		turnAroundCheckTick = getTickCount()		
		turnAround = true
	end

	lastDestinationX = destinationX
	lastDestinationY = destinationY
	
	if isElement(selectedRouteSound) then
		destroyElement(selectedRouteSound)
	end

	selectedRouteSound = false
end

addEventHandler("onClientColShapeHit", getRootElement(),
	function (element)
		if colshapeElements[source] and element == localPlayer then
			local currentShape = colshapeElements[source]
			
			clearGPSRoute()
			
			if currentShape >= 2 then
				if isTimer(checkForRerouteTimer) then
					killTimer(checkForRerouteTimer)
				end
				
				checkForRerouteTimer = false
				turnAround = false
			end
			
			if currentShape == #gpsRoute then
				exports.fv_infobox:addNotification("success","You have arrived at the selected destination.");
				for i = 1, currentShape do
					if isElement(gpsColshapes[i]) then
						destroyElement(gpsColshapes[i])
					end
					
					gpsColshapes[i] = nil
				end
				
				nextWp = false
				
				if isTimer(checkForRerouteTimer) then
					killTimer(checkForRerouteTimer)
				end
				
				checkForRerouteTimer = false
				setElementData(occupiedVehicle, "gpsDestination", false)
				return
			else
				for i = 1, currentShape do
					if isElement(gpsColshapes[i]) then
						destroyElement(gpsColshapes[i])
					end
					
					gpsColshapes[i] = nil
				end
				
				for i = currentShape, #gpsRoute do
					addGPSLine(gpsRoute[i].x, gpsRoute[i].y, gpsRoute[i].z);
				end
				
				if isTimer(checkForRerouteTimer) then
					killTimer(checkForRerouteTimer)
				end
				
				currentNode = currentShape + 1
				turnAroundCheckTick = getTickCount()
				checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
				reRouting = false
			end
			
			if gpsWaypoints[nextWp] and gpsWaypoints[nextWp][1] ~= "end" then
				if currentShape >= gpsWaypoints[nextWp][1] then
					nextWp = nextWp + 1
					routeInstructions = {}
					
					for i = currentShape, tonumber(gpsWaypoints[nextWp][1]) or #gpsRoute do
						gpsWaypoints[nextWp][3] = getDistanceBetweenPoints2D(gpsRoute[i].x, gpsRoute[i].y, gpsRoute[currentShape].x, gpsRoute[currentShape].y) / 0.9
					end
				else
					gpsWaypoints[nextWp][3] = getDistanceBetweenPoints2D(gpsRoute[currentShape].x, gpsRoute[currentShape].y, gpsRoute[gpsWaypoints[nextWp][1]].x, gpsRoute[gpsWaypoints[nextWp][1]].y) / 0.9

					if gpsWaypoints[nextWp][2] == "forward" and not routeInstructions["forward"] and currentShape > 2 then
						if gpsWaypoints[nextWp - 1] and currentShape < 2 + gpsWaypoints[nextWp - 1][1] then
							return
						end
						
						routeInstructions["forward"] = true
						return
					end
					
					local nextWaypointDistance = math.floor(gpsWaypoints[nextWp][3] / 10) * 10
					
					if nextWaypointDistance <= 50 and not routeInstructions[50] then
						routeInstructions[50] = true
						routeInstructions[250] = true
						routeInstructions[500] = true
						routeInstructions[1200] = true
						routeInstructions[1500] = true
						
						-- if gpsWaypoints[nextWp][2] == "left" then
						-- 	outputChatBox("balra")
						-- elseif gpsWaypoints[nextWp][2] == "right" then
						-- 	outputChatBox("jobbra")
						-- end
						
						return
					end

					if nextWaypointDistance > 230 and nextWaypointDistance <= 250 and not routeInstructions[250] then
						routeInstructions[250] = true
						routeInstructions[500] = true
						routeInstructions[1200] = true
						routeInstructions[1500] = true
						
						-- if gpsWaypoints[nextWp][2] == "left" then
						-- 	outputChatBox("200 50 majd bal")
						-- elseif gpsWaypoints[nextWp][2] == "right" then						
						-- 	outputChatBox("200 50 majd jobb")
						-- end
						
						return
					end
					
					if nextWaypointDistance > 480 and nextWaypointDistance <= 500 and not routeInstructions[500] then
						routeInstructions[500] = true
						routeInstructions[1200] = true
						routeInstructions[1500] = true
						
						-- if gpsWaypoints[nextWp][2] == "left" then
						-- 	outputChatBox("500 majd bal")
						-- elseif gpsWaypoints[nextWp][2] == "right" then
						-- 	outputChatBox("500 majd jobb")
						-- end
						
						return
					end
					
					if nextWaypointDistance > 1180 and nextWaypointDistance <= 1200 and not routeInstructions[1200] then
						routeInstructions[1200] = true
						routeInstructions[1500] = true
						
						-- if gpsWaypoints[nextWp][2] == "left" then
						-- 	outputChatBox("1200 majd bal")
						-- elseif gpsWaypoints[nextWp][2] == "right" then
						-- 	outputChatBox("1200 majd jobb")
						-- end
						
						return
					end
					
					if nextWaypointDistance > 1480 and nextWaypointDistance <= 1500 and not routeInstructions[1500] then
						routeInstructions[1500] = true
						
						-- if gpsWaypoints[nextWp][2] == "left" then
						-- 	outputChatBox("1500 majd bal")
						-- elseif gpsWaypoints[nextWp][2] == "right" then
						-- 	outputChatBox("500 majd jobb")
						-- end
						
						return
					end
				end
			else
				for i = currentShape, #gpsRoute do
					gpsWaypoints[nextWp][3] = getDistanceBetweenPoints2D(gpsRoute[i].x, gpsRoute[i].y, gpsRoute[currentShape].x, gpsRoute[currentShape].y) / 0.9
				end
			end
		end
	end
)

addEventHandler("onClientVehicleEnter", getRootElement(),
	function (player)
		if player == localPlayer and getElementData(source, "gpsDestination") then
			local destination = getElementData(source, "gpsDestination")
			gpsThread = coroutine.create(makeRoute)
			coroutine.resume(gpsThread, destination[1], destination[2], true)
		end
	end
)

addEventHandler("onClientVehicleExit", getRootElement(),
	function (player)
		if player == localPlayer and gpsRoute then
			endRoute()
		end
	end
)

addEventHandler("onClientElementDestroy", getRootElement(),
	function ()
		if source == occupiedVehicle and getElementData(source, "gpsDestination") then
			setElementData(source, "gpsDestination", false)
			
			if gpsRoute then
				endRoute()
			end
		end
	end
)

function calculateRoute(x1, y1, x2, y2)
	local startNode = getVehicleNodeClosestToPoint(x1, y1)
	local endNode = getVehicleNodeClosestToPoint(x2, y2)
	
	if not startNode then
		--outputChatBox("nincskapcs")
		return false
	end
	
	if not endNode then
		-- outputChatBox("masikuticel")
		return false
	end
	
	return calculatePath(startNode, endNode)
end

function endRoute()
	if gpsRoute then
		if gpsColshapes then
			for k, v in pairs(gpsColshapes) do
				colshapeElements[gpsColshapes[k]] = nil
				
				if isElement(v) then
					destroyElement(v)
				end
					
				gpsColshapes[k] = nil
			end
		end
		
		nextWp = false
		
		if isTimer(checkForRerouteTimer) then
			killTimer(checkForRerouteTimer)
		end
		
		checkForRerouteTimer = false
		clearGPSRoute()
		waypointEndInterpolation = getTickCount()
		gpsRoute = false
		gpsThread = false
	end
end

function reRoute(checkShape)
	if not gpsRoute or not occupiedVehicle then
		return
	end
	
	local vehiclePosX, vehiclePosY = getElementPosition(occupiedVehicle)
	
	if getDistanceBetweenPoints2D(gpsRoute[checkShape].x, gpsRoute[checkShape].y, vehiclePosX, vehiclePosY) >= 50 then
		if not makeRoute(lastDestinationX, lastDestinationY, true) then
			checkForRerouteTimer = setTimer(checkForReroute, 5000, 1)
			reRouting = true
		end
	else
		checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
		reRouting = false
	end
end

function checkForReroute()
	if not gpsRoute or not occupiedVehicle then
		return
	end
	
	local vehiclePosX, vehiclePosY = getElementPosition(occupiedVehicle)
	local nextColshapeDistance = getDistanceBetweenPoints2D(gpsRoute[currentNode].x, gpsRoute[currentNode].y, vehiclePosX, vehiclePosY)

	if nextColshapeDistance >= 30 and nextColshapeDistance < 80 and gpsRoute[currentNode + 1] and turnAroundCheckTick and getTickCount() - turnAroundCheckTick > 5000 then
		local vehicleOffsetX, vehicleOffsetY = getPositionFromElementOffset(occupiedVehicle, -1, 0, 0)
		local vehicleAngle = math.deg(getAngle(gpsRoute[currentNode + 1].x - gpsRoute[currentNode].x, gpsRoute[currentNode + 1].y - gpsRoute[currentNode].y, vehicleOffsetX - vehiclePosX, vehicleOffsetY - vehiclePosY))
		
		if vehicleAngle > 0 then
			turnAroundCheckTick = getTickCount()
			checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
			turnAround = true
			reRouting = false
			return
		else
			turnAround = false
			reRouting = false
		end
	end
	
	if isTimer(checkForRerouteTimer) then
		killTimer(checkForRerouteTimer)
	end
	
	if nextColshapeDistance > 100 then
		checkForRerouteTimer = setTimer(reRoute, math.random(3000, 5000), 1, currentNode)
		reRouting = getTickCount()
	else
		checkForRerouteTimer = setTimer(checkForReroute, rerouteCheckTime, 1)
	end
end

function getPositionFromElementOffset(element, x, y, z)
	local elementMatrix = getElementMatrix(element)
	
	local offsetX = x * elementMatrix[1][1] + y * elementMatrix[2][1] + z * elementMatrix[3][1] + elementMatrix[4][1]
	local offsetY = x * elementMatrix[1][2] + y * elementMatrix[2][2] + z * elementMatrix[3][2] + elementMatrix[4][2]
	local offsetZ = x * elementMatrix[1][3] + y * elementMatrix[2][3] + z * elementMatrix[3][3] + elementMatrix[4][3]
	
	return offsetX, offsetY, offsetZ
end

function getAngle(x1, y1, x2, y2)
	local angle = math.atan2(x2, y2) - math.atan2(x1, y1)
	
	if angle <= -math.pi then
		angle = angle + math.pi * 2
	elseif angle > math.pi then
		angle = angle - math.pi * 2
	end
	
	return angle
end

function shallowcopy(t)
	if type(t) ~= "table" then
		return t
	end
	
	local target = {}
	for k, v in pairs(t) do
		target[k] = v
	end
	return target
end

function calculatePath(startNode, endNode)
	local usedNodes = {[startNode.id] = true}
	local currentNodes = {}
	local ways = {}
	
	for id, distance in pairs(startNode.neighbours) do
		usedNodes[id] = true
		currentNodes[id] = distance
		ways[id] = {startNode.id}
	end
	
	while true do
		local currentNode = -1
		local maxDistance = 10000
		
		for id, distance in pairs(currentNodes) do
			if distance < maxDistance then
				currentNode = id
				maxDistance = distance
			end
		end
		
		if currentNode == -1 then
			return false
		end
		
		if endNode.id == currentNode then
			local lastNode = currentNode
			local foundedNodes = {}
			
			while (tonumber(lastNode) ~= nil) do
				local node = getVehicleNodeByID(lastNode)
				table.insert(foundedNodes, 1, node)
				lastNode = ways[lastNode]
			end
			
			return foundedNodes
		end
		
		for id, distance in pairs(getVehicleNodeByID(currentNode).neighbours) do
			if not usedNodes[id] then
				ways[id] = currentNode
				currentNodes[id] = maxDistance + distance
				usedNodes[id] = true
			end
		end
		
		currentNodes[currentNode] = nil
	end
end

function getVehicleNodeByID(nodeID)
	local areaID = floor(nodeID / 65536)
	if areaID >= 0 and areaID <= 63 then
		return vehicleNodes[areaID][nodeID]
	end
end

function getVehicleNodeClosestToPoint(x, y)
	local foundedNode = -1
	local lastNodeDistance = 10000
	local areaID = floor((y + 3000) / 750) * 8 + floor((x + 3000) / 750)
	
	if not vehicleNodes[areaID] then
		return false
	end
	
	for _, node in pairs(vehicleNodes[areaID]) do
		local nodeDistance = getDistanceBetweenPoints2D(x, y, node.x, node.y)
		
		if lastNodeDistance > nodeDistance then
			lastNodeDistance = nodeDistance
			foundedNode = node
		end
	end
	
	return foundedNode
end

function isEventHandlerAdded(eventName, attachedTo, func)
	if type(eventName) == "string" and  isElement(attachedTo) and type(func) == "function" then
		local isAttached = getEventHandlers(eventName, attachedTo)
		
		if type(isAttached) == "table" and #isAttached > 0 then
			for i, v in ipairs(isAttached) do
				if v == func then
					return true
				end
			end
		end
	end
	
	return false
end